using InstaDirectMessage_ButDev.Tools;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Windows.Forms;

namespace InstaDirectMessage_ButDev
{
    public partial class ChangeLog : Form
    {
        private static bool ServerCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            if (certificate.GetRawCertDataStringreturn true; else return false;
        }

        public ChangeLog()
        {
            InitializeComponent();

            AfterLoad();
        }

        private void AfterLoad()
        {
            string html = "";
            string url = B64X.Encrypt("https://instamailchecker.site/InstaDirectMessage/ChangeLog.html");
            if (Translate.local == "English") url = B64X.Encrypt("https://instamailchecker.site/InstaDirectMessage/ChangeLog_en.html");
            try
            {
                HttpWebRequest requesttimereal = (HttpWebRequest)WebRequest.Create(B64X.Decrypt(url));
                requesttimereal.Method = "GET";
                requesttimereal.ServerCertificateValidationCallback += ServerCertificateValidationCallback;
                HttpWebResponse responze = (HttpWebResponse)requesttimereal.GetResponse();
                html = B64X.Encrypt(new StreamReader(responze.GetResponseStream()).ReadToEnd());
            }
            catch { }

            webBrowser.DocumentText = B64X.Decrypt(html);
        }

        private void buttonInstallUpdate_Click(object sender, EventArgs e)
        {
            try
            {
                Hide();
                //Downloading...

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;/* | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;*/
                using (var request = new xNet.HttpRequest())
                {
                    request.SslCertificateValidatorCallback += ServerCertificateValidationCallback;
                    request.IgnoreProtocolErrors = true;

                    xNet.HttpResponse response = request.Get("https://instamailchecker.site/InstaDirectMessage/update.exe");
                    response.ToFile(Path.Combine(Environment.CurrentDirectory, "update.exe"));
                }

                //Install
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe";
                startInfo.Arguments = "/C ping -n 3 127.0.0.1>nul && \"" + Path.Combine(Environment.CurrentDirectory, "update.exe") + "\"";
                Process.Start(startInfo);

                Environment.Exit(0);
            } catch(Exception ex)
            {
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, "InstaDirect-Soft.log"), MCrypt.Encrypt(Environment.NewLine + "blablabla" + B64X.Encrypt("katysa") + Environment.NewLine + ex.ToString() + Environment.NewLine), System.Text.Encoding.UTF8);
                MessageBox.Show(Translate.Tr("Не удалось провести обновление!"), Translate.Tr("Ошибка!"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                Close();
            }
        }

        private void buttonClose_Click(object sender, EventArgs e)
        {
            Close();
        }
    }
}
